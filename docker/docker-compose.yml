version: '3.3'

networks:
  application:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  db:

services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: portal_centro
      PGDATA: /data/postgres
    volumes:
      - db:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - application
    restart: unless-stopped

  api:
    container_name: api
    image: maven:3.8.3-openjdk-17
    working_dir: /home/java/app
    restart: always
    command: sh -c "chmod +x ./mvnw && ./mvnw spring-boot:run -Dspring-boot.run.jvmArguments='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005'"
    volumes:
      - .././:/home/java/app
    ports: 
      - "8085:8085"
      - "5005:5005"
    networks:
      - application
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - 9090:9090
  grafana:
    image: grafana/grafana:latest
    container_name: 'grafana8'
    ports:
      - '3000:3000'
    volumes:
      - ./monitoring/grafana/:/etc/grafana/
    environment:
      - GF_LOG_MODE=console file
      - GF_LOG_LEVEL=trace
    env_file:
      - ./monitoring/grafana/config.monitoring
    depends_on:
      - elasticsearch
  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: elasticsearch
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - '9200:9200'
      - '9300:9300'
  logstash:
    image: logstash:8.6.2
    container_name: 'logstash'
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      XPACK_MONITORING_ELASTICSEARCH_HOSTS: "elasticsearch:9200"
      XPACK_MONITORING_ENABLED: "true"
    volumes:
      - ./monitoring/logstash/pipe/:/usr/share/logstash/load
      - ./monitoring/logstash/conf/:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
  kibana:
    image: kibana:8.6.2
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: '["http://host.docker.internal:9200/"]'
    depends_on:
      - elasticsearch
  zabbix-server:
    image: zabbix/zabbix-server-pgsql:trunk-ubuntu
    restart: always
    environment:
      DB_SERVER_HOST: host.docker.internal
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: portal_centro
    volumes:
      - /usr/lib/zabbix/alertscripts:/usr/lib/zabbix/alertscripts
    ports:
      - "10050:10050"
      - "10051:10051"
  zabbix-web:
    image: zabbix/zabbix-web-nginx-pgsql:trunk-ubuntu
    restart: always
    environment:
      DB_SERVER_HOST: host.docker.internal
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: portal_centro
      PHP_TZ: "America/Sao_Paulo"
    depends_on:
      - zabbix-server
    ports:
      - "80:8080"
      - "443:8443"
  zabbix-agent:
    container_name: zabbix-agent
    image: zabbix/zabbix-agent2:alpine-5.0.1
    user: root
    links:
      - zabbix-server
    restart: always
    privileged: true
    volumes:
      - /var/run:/var/run
    ports:
      - '10053:10053'
    environment:
      - ZBX_HOSTNAME=Zabbix server
      - ZBX_SERVER_HOST=host.docker.internal
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    image: confluentinc/cp-enterprise-kafka:5.5.3
    depends_on: [zookeeper]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092,EXTERNAL_DIFFERENT_HOST://:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092,EXTERNAL_DIFFERENT_HOST://144.22.182.88:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,EXTERNAL_DIFFERENT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9991
    ports:
      - 29092:29092
      - 29093:29093
  debezium:
    image: debezium/connect:1.4
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081/
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081/
    depends_on: [kafka]
    ports:
      - 8083:8083
  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.3
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081/
    depends_on: [zookeeper, kafka]
